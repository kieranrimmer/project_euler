
/*
 *
 * Each new term in the Fibonacci sequence is generated by adding the previous two terms. 
 * By starting with 1 and 2, the first 10 terms will be:
 *
 * 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
 *
 * By considering the terms in the Fibonacci sequence whose values do not exceed four million, 
 * find the sum of the even-valued terms.
 * 
 */

#include <iostream>

constexpr int TEST_ARG = 10;
constexpr int TEST_ANSWER = 10;
constexpr int PROBLEM_ARG = 4'000'000;

int fibSum (int idx) {
  if (idx < 2) {
    return 0;
  }
  int retVal{2};
  int queue[2] = {1,2};
  int queueIdx{0};
  while (queue[queueIdx == 0 ? 1: 0] <= idx) {
    queue[queueIdx] = queue[0] +  queue[1];
    if (queue[queueIdx] % 2 == 0) {
      retVal += queue[queueIdx];
    }
    queueIdx == 0 ? queueIdx = 1: queueIdx = 0; 
  }
  return retVal;
}

int main(int argc, char * argv[]) {
  std::cout << "TEST: " << TEST_ARG << " -> " << fibSum(TEST_ARG) << ", expecting " << TEST_ANSWER << "\n";
  std::cout << "PROBLEM: " << PROBLEM_ARG << " -> " << fibSum(PROBLEM_ARG) << "\n";
}